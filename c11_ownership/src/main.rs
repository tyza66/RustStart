fn main() {
    // 相当于是rust中的内存管理机制
    // rust中的内存管理机制是基于所有权的
    // rust中堆中的引用只能被一个变量拥有，如果将在这个变量的值赋值给其他变量那么之前那个变量就会自动失效
    // 在rust中只有变量的值只有两种操作：move和copy
    // move: 当变量赋值给另一个变量时，原变量的值会被移动到新变量上
    // copy: 当变量赋值给另一个变量时，原变量的值会被复制到新变量上

    // 一般基本数据类型赋值给另一个变量时(因为存在栈上)，会发生copy操作
    let a = 1;
    let b = a;
    println!("a={}, b={}", a, b);

    // 一般引用数据类型赋值给另一个变量时(因为存在堆上)，会发生move操作
    let s1 = String::from("hello");
    let s2 = s1;
    // println!("s1={}, s2={}", s1, s2); // 这里会报错，因为s1的值已经被move到s2上了
    println!("s2={}", s2);
}
